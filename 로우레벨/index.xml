<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>로우레벨 on 둥충코딩</title>
    <link>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/</link>
    <description>Recent content in 로우레벨 on 둥충코딩</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Sat, 29 May 2021 20:53:40 +0900</lastBuildDate><atom:link href="https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Curses</title>
      <link>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/curses/</link>
      <pubDate>Sat, 29 May 2021 20:53:40 +0900</pubDate>
      
      <guid>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/curses/</guid>
      <description>Curses curses란 유닉스 계열 운영체제에서 터미널 환경 제어하는 라이브러리를 말한다. 본인이 fzc를 만드는 데 사용하였다. 기본적인 사용법은 간단히 검색을 하면 나오는데 그 외 좀 검색하기 어려웠던 내용을 적어보고자 한다.
검색하기 힘들었던 내용 표준출력과 혼용하여 사용하기 Curses는 기본적인 방식으로 로직을 구성하면 표준입출력을 사용하기 때문에 표준출력을 별도의 용도로 사용하기 어렵다. fzc를 만드는데 화면의 내용은 퍼지검색 리스트 표출이지만 파일을 선택하고 나서는 표준출력으로 선택한 파일 내용을 표출해야했기 때문에 필요했다. 이는 많은 검색을 통해 initscr을 호출하는 대신 new term을 구성하는 방식을 사용하면 되는 내용을 찾았다.</description>
    </item>
    
    <item>
      <title>yyjson분석</title>
      <link>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/yyjson%EB%B6%84%EC%84%9D/</link>
      <pubDate>Sun, 02 May 2021 17:44:40 +0900</pubDate>
      
      <guid>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/yyjson%EB%B6%84%EC%84%9D/</guid>
      <description>yyjson 분석 yyjson은 현존하는 JSON 파서중 가장 빠르다고 알려져 있는 라이브러리이다. 이 소스코드를 살펴보면서 유용한 것들과 공부할 만한 것 들을 메모한다.
단 두개 파일 yyjson.c , yyjson.h 단 두개 파일만 제공하여 각 프로젝트에 쉽게 빌드할 수 있도록 하였다.
CPU 최적화 json 과 같은 텍스트 분석이 필요로 하는 것은 많은 선후 상태 의존성을 필요로 한다. 따라서 병렬로 수행하기 힘들며 수많은 분기가 존재하여 머신의 성능을 이끌어내기 어려운 분야 중 하나. 따라서 yyjson이 어떤 최적화들을 하였는지 유용한 트릭들을 확인하도록 한다.</description>
    </item>
    
    <item>
      <title>비트연산</title>
      <link>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/%EB%B9%84%ED%8A%B8%EC%97%B0%EC%82%B0/</link>
      <pubDate>Sun, 02 May 2021 17:02:31 +0900</pubDate>
      
      <guid>https://doongchoong.github.io/%EB%A1%9C%EC%9A%B0%EB%A0%88%EB%B2%A8/%EB%B9%84%ED%8A%B8%EC%97%B0%EC%82%B0/</guid>
      <description>비트연산 Bit Twiddling Hacks 에서 정리되어 있는 비트 관련 내용 몇 가지 감명 받거나 유용해보이는 것 위주로 정리
바이트 관련 워드에 0인 바이트가 있는지 확인하기 워드는 프로세서가 기본적으로 처리할수 있는 단위를 말하며 이 문서에선 4bytes를 의미한다. 4bytes 내에 0바이트가 존재하는지 확인하는 것으로서 이를 활용하면 strlen 등을 최적화할 수 있다.
#define haszero(v) (((v)-0x01010101UL) &amp;amp; ~ (v) &amp;amp; 0x80808080UL) 이 매크로를 사용하면 0인 바이트가 있을때 해당바이트 최상위 비트가 1로 세팅된다.
리틀엔디언 세번째바이트가 0일 경우 0x800000 첫번째 바이트가 0일 경우 0x80 이런 식으로 결과가 나오게 된다.</description>
    </item>
    
  </channel>
</rss>
